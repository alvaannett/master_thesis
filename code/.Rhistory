for (i in 1:no_of_iterations){
boots[i]<-mean(sample(x,replace=TRUE))
}
percentiles_boots<-quantile(boots,c(0.025,0.975))
percentiles_boots
#---- A: PROBELM 3 -------------------------
require("MASS")
data(geyser)
par(mfrow=c(3,2))
attach(geyser)
set.seed(137) #random seed in order to get the same result again
no_of_samples=10000
boots<-numeric(no_of_samples)
for (i in 1:no_of_samples){
boots[i]<-mean(sample(duration,replace=TRUE))
}
percentiles_boots<-quantile(boots,c(0.025,0.975))
percentiles_boots
#---- B: PROBLEM 1 ----------------
gene_expressions_for_gene_A<-c(13.2,	8.2,	10.9,	14.3,	10.7,	6.6,	9.5,	10.8,	8.8,	13.3)
gene_expressions_for_gene_B	<-c(14.0,	8.8,	11.2,	14.2,	11.8,	6.4,	9.8,	11.3,	9.3,	13.6)
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotB1.png")
plot(gene_expressions_for_gene_A, gene_expressions_for_gene_B,
ylab = "Gene B", xlab = "Gene A", main = "Gene Expression",
cex.lab = 1.3, cex.main = 2, cex = 1.5)
#dev.off()
#calculate correlation coefficient
cor(gene_expressions_for_gene_A, gene_expressions_for_gene_B,
method = "pearson")
#number of resampling
N = 10000
res_correlation <-numeric(N)
for (i in 1:N){
#resample integers from 1 to 10 with replacement
sample_bootstrap =  sample(1:10, 10, replace = T)
#extract pairs values from data
GE_bootstrap_A = gene_expressions_for_gene_A[sample_bootstrap]
GE_bootstrap_B = gene_expressions_for_gene_B[sample_bootstrap]
#calculate correlation
res_correlation[i]<- cor(GE_bootstrap_A, GE_bootstrap_B, method = "pearson")
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotB2.png")
hist(res_correlation, xlab = "Correlation Coefficient", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res_correlation,c(0.025,0.975))
percentiles
#---- C: PROBLEM 1 ------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 14), rep("w",46))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 60, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC1.png")
hist(res, xlab = "Fraction of Patients with Oncogene", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 2 -------------------
N = 10000
#define urn (r = mutation)
class = c(rep("r", 4), rep("w", 16))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(class, 20, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC2.png")
hist(res, xlab = "Fraction of Errors", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3a -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 89), rep("w", 7))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 96, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3a.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 96 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3b -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 357), rep("w", 27))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 384, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3b.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 384 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3c -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 1428), rep("w",  108))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 1536, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3c.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 1536 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
require("MASS")
data(geyser)
par(mfrow=c(3,2))
attach(geyser)
set.seed(137) #random seed in order to get the same result again
no_of_samples=10000
boots<-numeric(no_of_samples)
for (i in 1:no_of_samples){
boots[i]<-mean(sample(duration,replace=TRUE))
}
percentiles_boots<-quantile(boots,c(0.025,0.975))
percentiles_boots
rm(list=ls()) #reset working space
graphics.off() #closing current or all graphical windows
#---- A: PROBLEM 1 --------------------------
mu=5
sigma=2.7
no_of_samples<-1000
no_of_iterations<-10000
x<-numeric(no_of_iterations)
for (i in 1:no_of_iterations){
x[i]<-mean (rnorm(no_of_samples,m=mu,sd=sigma))
}
percentiles<-quantile(x,c(0.025,0.975))
percentiles
#---- A: PROBLEM 2 -------------------------
mu=5.21
sigma=3.01
no_of_samples<-20
x<-rnorm(no_of_samples,m=mu,sd=sigma)
no_of_iterations=1000
boots<-numeric(no_of_iterations)
for (i in 1:no_of_iterations){
boots[i]<-mean(sample(x,replace=TRUE))
}
percentiles_boots<-quantile(boots,c(0.025,0.975))
percentiles_boots
#---- A: PROBELM 3 -------------------------
require("MASS")
data(geyser)
attach(geyser)
set.seed(137) #random seed in order to get the same result again
no_of_samples=10000
boots<-numeric(no_of_samples)
for (i in 1:no_of_samples){
boots[i]<-mean(sample(duration,replace=TRUE))
}
percentiles_boots<-quantile(boots,c(0.025,0.975))
percentiles_boots
#---- B: PROBLEM 1 ----------------
gene_expressions_for_gene_A<-c(13.2,	8.2,	10.9,	14.3,	10.7,	6.6,	9.5,	10.8,	8.8,	13.3)
gene_expressions_for_gene_B	<-c(14.0,	8.8,	11.2,	14.2,	11.8,	6.4,	9.8,	11.3,	9.3,	13.6)
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotB1.png")
plot(gene_expressions_for_gene_A, gene_expressions_for_gene_B,
ylab = "Gene B", xlab = "Gene A", main = "Gene Expression",
cex.lab = 1.3, cex.main = 2, cex = 1.5)
#dev.off()
#calculate correlation coefficient
cor(gene_expressions_for_gene_A, gene_expressions_for_gene_B,
method = "pearson")
#number of resampling
N = 10000
res_correlation <-numeric(N)
for (i in 1:N){
#resample integers from 1 to 10 with replacement
sample_bootstrap =  sample(1:10, 10, replace = T)
#extract pairs values from data
GE_bootstrap_A = gene_expressions_for_gene_A[sample_bootstrap]
GE_bootstrap_B = gene_expressions_for_gene_B[sample_bootstrap]
#calculate correlation
res_correlation[i]<- cor(GE_bootstrap_A, GE_bootstrap_B, method = "pearson")
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotB2.png")
hist(res_correlation, xlab = "Correlation Coefficient", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res_correlation,c(0.025,0.975))
percentiles
#---- C: PROBLEM 1 ------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 14), rep("w",46))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 60, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC1.png")
hist(res, xlab = "Fraction of Patients with Oncogene", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 2 -------------------
N = 10000
#define urn (r = mutation)
class = c(rep("r", 4), rep("w", 16))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(class, 20, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC2.png")
hist(res, xlab = "Fraction of Errors", main = "Histogram",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3a -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 89), rep("w", 7))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 96, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3a.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 96 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3b -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 357), rep("w", 27))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 384, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3b.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 384 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
#---- C: PROBLEM 3c -------------------
N = 10000
#define urn (r = mutation)
patients = c(rep("r", 1428), rep("w",  108))
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(patients, 1536, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "r"])/length(data_bootstrap)
}
#png("C:\\Users\\alva\\Desktop\\stat_inf_bioinfo\\plot\\02_plotC3c.png")
hist(res, xlab = "Fraction of Successful Events", main = "Histogram 1536 Well Plate",
cex.lab = 1.3, cex.main = 2)
#dev.off()
percentiles<-quantile(res, c(0.025,0.975))
percentiles
ecdf(c(3, 6, 8))
plot(ecdf(c(3, 6, 8)))
plot(ecdf(c(3, 6, 8)), verticals = T)
plot(ecdf(c(1, 2, 2, 4)), verticals = T)
rm(list=ls()) #reset working space
graphics.off() #closing current or all graphical windows
print("PROBLEM A1:")
print("Null hypothesis: The classifier assigns classes randomly with 50% chance")
N = 10000
classifier =  c("red", "white")
res <-numeric(N)
for (i in 1:N){
data_bootstrap = sample(classifier, 20, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "red"])
}
png("03_plotA1.png")
dev.off()
plot(ecdf(res), do.points = F, verticals = T,
xlab = "number of errors", ylab = "Probability P(X <= x)",
main = "")
abline(v = 7, col = "red", lty = 2)
print("p-value:")
print(sum(res >= 7)/N)
print("The null hypothesis can not be rejected. The classifier is as good as one assigning values randomly.")
res
print("PROBLEM A2a:")
print("Null hypothesis: 88% of the population has antibodies")
N = 10000
#Null hypothesis: 88% of the population has antibodies (red)
anti =  c(rep("red", 1056), rep("white", 144))
res <-numeric(N)
for(i in 1:N){
data_bootstrap = sample(anti, 1200, replace = T)
res[i] = length(data_bootstrap[data_bootstrap == "red"])
}
hist(res, main = "Histogram", xlab = "Number of individuals with antibodies")
abline(v = 0.75, col = "red", lty = 2)
abline(v = 0.75*1200, col = "red", lty = 2)
0.75*1200
print("p-value:")
print(sum(res <= 900)/N)
print("The null hypothesis can be rejected. Our observed data is very unlikely if the null hypothesis would be true")
print("PROBLEM D1:")
dA = c(-0.67,-1.29,-0.42,0.27,-0.59,-0.06, 0.41,0.40,1.00, 1.14)
dB = c(0.45,1.68,0.17,0.07,0.35,0.00,0.16,0.16,1.00,1.29)
print("Pearsons correlation coefficient observed data:")
cAB = cor(dA, dB, method = "pearson")
print(cAB)
print("")
N = 10000
print("Null hypothesis: there is no linear correlation between gene A and gene B")
res_correlation <-numeric(N)
for (i in 1:N){
#resample values without replacement (permutation)
sample_A_bootstrap =  sample(dA, 10, replace = F)
#calculate correlation
res_correlation[i]<- cor(sample_A_bootstrap, dB, method = "pearson")
}
png("03_plotD1a.png")
dev.off()
hist(res_correlation, main = "Histogram", xlab = "Pearsons Correlation Coefficient")
abline(v = cAB, col = "red", lty = 2)
pValue = sum(abs(res_correlation)>abs(cAB))/N
print("p-value:")
print(pValue)
print("The null hypothesis can not be rejected based on our observed data. There is no correlatein between gene A and B.")
print("")
plot(dA, dB, xlab = "Expression Gene A", ylab = "Expression Gene B")
dA = c(-0.67,-1.29,-0.42,0.27,-0.59,-0.06, 0.41,0.40,1.00, 1.14)
dB = c(0.45,1.68,0.17,0.07,0.35,0.00,0.16,0.16,1.00,1.29)
theta<-lsfit(dA^2, dB, intercept=TRUE)
print("Estimates of a and b in quadratic formula B = a * A^2 +b:")
print(theta$coefficients)
N = 10000
print("Null hypothesis: there is no quadratic correlation between gene A and gene B")
res_b = numeric(N)
res_a = numeric(N)
for (i in 1:N){
#resample values without replacement (permutation)
sample_A_bootstrap =  sample(dA, 10, replace = F)
#estimate a and b
theta_bootstrap = lsfit(sample_A_bootstrap^2, dB, intercept=TRUE)
res_b[i] = theta_bootstrap$coefficients[1]
res_a[i] = theta_bootstrap$coefficients[2]
}
png("03_plotD2a.png")
dev.off()
plot(res_a, res_b, xlab = "a", ylab = "b")
points(theta$coefficients[2], theta$coefficients[1], col = "red", pch = 19, cex = 1.5)
hist(res_a, main = "Histogram", xlab = "a")
abline(v = theta$coefficients[2], col = "red", lty = 2)
print("The null hypothesis can be rejected based on our observed data. There is probably a quadratic relationship between gene A and B.")
print("")
install.packages('Seurat')
install.packages('patchwork')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(Seurat)
library(patchwork)
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
setwd("C:/Users/alva/Desktop/exjobb_master/master_thesis/code")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/alva/Desktop/exjobb_master/master_thesis/data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "../data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "..\\data\\pbmc3k\\filtered_gene_bc_matrices\\hg19\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:/Users/alva/Desktop/exjobb_master/master_thesis/data/pbmc3k/filtered_gene_bc_matrices/hg19/")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C://Users//alva//Desktop//exjobb_master//master_thesis//data//pbmc3k//filtered_gene_bc_matrices//hg19//")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\master_thesis\\data\\pbmc3k\\filtered_gene_bc_matrices\\hg19\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\data\\pbmc3k\\filtered_gene_bc_matrices\\hg19\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\Users\alva\Desktop\exjobb_master\data\filtered_gene_bc_matrices\hg\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\alva\Desktop\exjobb_master\data\filtered_gene_bc_matrices\hg\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\data\\filtered_gene_bc_matrices\\hg\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\data\\filtered_gene_bc_matrices\\hg")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\data\\filtered_gene_bc_matrices\\hg\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "\\data\\filtered_gene_bc_matrices\\hg\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "..\\data\\filtered_gene_bc_matrices\\hg\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "..\\data\\filtered_gene_bc_matrices\\hg19\\")
# Load the PBMC dataset
pbmc.data <- Read10X(data.dir = "C:\\Users\\alva\\Desktop\\exjobb_master\\data\\filtered_gene_bc_matrices\\hg19\\")
# Initialize the Seurat object with the raw (non-normalized data).
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k", min.cells = 3, min.features = 200)
pbmc
# Show QC metrics for the first 5 cells
head(pbmc@meta.data, 5)
# The [[ operator can add columns to object metadata. This is a great place to stash QC stats
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
pbmc[["percent.mt"]]
# Visualize QC metrics as a violin plot
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
# FeatureScatter is typically used to visualize feature-feature relationships, but can be used
# for anything calculated by the object, i.e. columns in object metadata, PC scores etc.
plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
#remove low quality data
pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
#"LogNormalize" normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result.
pbmc <- NormalizeData(pbmc, normalization.method = "LogNormalize", scale.factor = 10000)
# Directly model the mean-variance relationship inherent in single-cell data
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 + plot2
# Only scales the selected features. If all genes wanted add: features = all.genes
pbmc <- ScaleData(pbmc)
#PCA on scaled selecte features
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
DimPlot(pbmc, reduction = "pca")
# Heatmap
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
# NOTE: This process can take a long time for big datasets, comment out for expediency. More
# approximate techniques such as those implemented in ElbowPlot() can be used to reduce
# computation time
pbmc <- JackStraw(pbmc, num.replicate = 100)
pbmc <- ScoreJackStraw(pbmc, dims = 1:20)
JackStrawPlot(pbmc, dims = 1:15)
# Elbowplot (plots the variance explained by each PC)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 0.5)
# Look at cluster IDs of the first 5 cells
head(Idents(pbmc), 5)
reticulate::py_install(packages = 'umap-learn')
y
# Install UMAP: reticulate::py_install(packages = 'umap-learn')
DimPlot(pbmc, reduction = "umap")
# Install UMAP: reticulate::py_install(packages = 'umap-learn')
library(umap-learn)
# Install UMAP: reticulate::py_install(packages = 'umap-learn')
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
# find all markers of cluster 1
cluster1.markers <- FindMarkers(pbmc, ident.1 = 1, min.pct = 0.25)
head(cluster1.markers, n = 5)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
# find all markers distinguishing cluster 5 from clusters 0 and 3
cluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3), min.pct = 0.25)
head(cluster5.markers, n = 5)
# find markers for every cluster compared to all remaining cells, report only the positive ones
pbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
pbmc.markers %>% group_by(cluster) %>% top_n(n = 2, wt = avg_logFC)
#Violin plot
VlnPlot(pbmc, features = c("MS4A1", "CD79A"))
# you can plot raw counts as well
VlnPlot(pbmc, features = c("NKG7", "PF4"), slot = "counts", log = TRUE)
FeaturePlot(pbmc, features = c("MS4A1", "GNLY", "CD3E", "CD14", "FCER1A", "FCGR3A", "LYZ", "PPBP",
"CD8A"))
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
top10 <- pbmc.markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_logFC)
DoHeatmap(pbmc, features = top10$gene) + NoLegend()
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
new.cluster.ids <- c("Naive CD4 T", "Memory CD4 T", "CD14+ Mono", "B", "CD8 T", "FCGR3A+ Mono",
"NK", "DC", "Platelet")
names(new.cluster.ids) <- levels(pbmc)
pbmc <- RenameIdents(pbmc, new.cluster.ids)
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
saveRDS(pbmc, file = "..01_seurat_guided_tutorial.rds")
library(Seurat)
library(SeuratData)
install.packages('SeuratData')
(SeuratData)
library(SeuratData)
devtools::install_github('satijalab/seurat-data')
#devtools::install_github('satijalab/seurat-data')
library(SeuratData)
#devtools::install_github('satijalab/seurat-data')
devtools::install_github('satijalab/seurat-data')
updateR()
library(installr)
updateR()
updateR()
updateR()
